{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/aayush/Documents/GitHub/book_exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"C:/Users/aayush/Documents/GitHub/book_exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:/Users/aayush/Documents/GitHub/book_exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"C:/Users/aayush/Documents/GitHub/book_exchange/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport HTTPError from \"./HTTPError.js\";\nvar requiredBody = [\"GET\", \"POST\", \"PUT\", \"DELETE\"];\nexport default /*#__PURE__*/(function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, _ref) {\n    var method, headers, body, otherOptions, fetchOptions, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            method = _ref.method, headers = _ref.headers, body = _ref.body, otherOptions = _objectWithoutProperties(_ref, [\"method\", \"headers\", \"body\"]);\n            fetchOptions = _objectSpread({\n              method: method,\n              mode: \"cors\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: body\n            }, otherOptions);\n\n            if (requiredBody.includes(method)) {\n              fetchOptions.body = JSON.stringify(body);\n            }\n\n            _context.next = 5;\n            return fetch(url, fetchOptions);\n\n          case 5:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new HTTPError(response);\n\n          case 8:\n            _context.next = 10;\n            return response.json();\n\n          case 10:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["C:/Users/aayush/Documents/GitHub/book_exchange/src/fetchData.js"],"names":["HTTPError","requiredBody","url","method","headers","body","otherOptions","fetchOptions","mode","includes","JSON","stringify","fetch","response","ok","json"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AAEA,IAAMC,YAAY,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,QAAvB,CAArB;AAEA;AAAA,uEAAe,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,MAAd,QAAcA,MAAd,EAAsBC,OAAtB,QAAsBA,OAAtB,EAA+BC,IAA/B,QAA+BA,IAA/B,EAAwCC,YAAxC;AACPC,YAAAA,YADO;AAEXJ,cAAAA,MAAM,EAANA,MAFW;AAGXK,cAAAA,IAAI,EAAE,MAHK;AAIXJ,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAJE;AAOXC,cAAAA,IAAI,EAAJA;AAPW,eAQRC,YARQ;;AAUb,gBAAIL,YAAY,CAACQ,QAAb,CAAsBN,MAAtB,CAAJ,EAAmC;AACjCI,cAAAA,YAAY,CAACF,IAAb,GAAoBK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAApB;AACD;;AAZY;AAAA,mBAaUO,KAAK,CAACV,GAAD,EAAMK,YAAN,CAbf;;AAAA;AAaPM,YAAAA,QAbO;;AAAA,gBAcRA,QAAQ,CAACC,EAdD;AAAA;AAAA;AAAA;;AAAA,kBAeL,IAAId,SAAJ,CAAca,QAAd,CAfK;;AAAA;AAAA;AAAA,mBAiBMA,QAAQ,CAACE,IAAT,EAjBN;;AAAA;AAiBPA,YAAAA,IAjBO;AAAA,6CAkBNA,IAlBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import HTTPError from \"./HTTPError.js\";\r\n\r\nconst requiredBody = [\"GET\", \"POST\", \"PUT\", \"DELETE\"];\r\n\r\nexport default async (url, { method, headers, body, ...otherOptions }) => {\r\n  const fetchOptions = {\r\n    method,\r\n    mode: \"cors\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body,\r\n    ...otherOptions\r\n  };\r\n  if (requiredBody.includes(method)) {\r\n    fetchOptions.body = JSON.stringify(body);\r\n  }\r\n  const response = await fetch(url, fetchOptions);\r\n  if (!response.ok) {\r\n    throw new HTTPError(response);\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}